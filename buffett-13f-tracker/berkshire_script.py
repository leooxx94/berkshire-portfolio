import requests
import xml.etree.ElementTree as ET
from collections import defaultdict
import pandas as pd
from openpyxl.utils import get_column_letter
import smtplib
from email.message import EmailMessage

CIK = "0001067983"  # Berkshire Hathaway
HEADERS = {
    "User-Agent": "EDGAR13FReader/1.0 (youremail@gmail.com)"  # Change with your email
}

# Telegram
TELEGRAM_TOKEN = "123456789:AAE0........."  # Change with your telegram token generated by BotFather
TELEGRAM_CHAT_ID = "123456789"  # Change with your telegram chat id generated by BotFather

# Email
EMAIL_FROM = "youremail@gmail.com"  # Change with your email
EMAIL_TO = "emailtosend@gmail.com"  # Change with the email to send the message
EMAIL_PASS = "password" # Change with your email password

# Scarica i filings disponibili
submissions_url = f"https://data.sec.gov/submissions/CIK{CIK}.json"
response = requests.get(submissions_url, headers=HEADERS)
data = response.json()
forms = data['filings']['recent']


def send_telegram_message(message, token, chat_id):
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    data = {"chat_id": chat_id, "text": message}
    requests.post(url, data=data)


def get_latest_13f_accessions(forms, count=3):
    filings = [
        (date, acc.replace("-", ""))
        for form, date, acc in zip(forms['form'], forms['filingDate'], forms['accessionNumber'])
        if form == '13F-HR'
    ]
    if len(filings) < count:
        raise Exception(f"Sono disponibili solo {len(filings)} filing 13F-HR.")
    return filings[:count]

def load_portfolio(accession):
    index_url = f"https://www.sec.gov/Archives/edgar/data/{int(CIK)}/{accession}/index.json"
    index_resp = requests.get(index_url, headers=HEADERS)
    index_data = index_resp.json()


    candidates = [item["name"] for item in index_data["directory"]["item"] if item["name"].endswith(".xml")]
    preferred = [name for name in candidates if "info" in name.lower() or "holding" in name.lower()]
    xml_filename = preferred[0] if preferred else (candidates[0] if candidates else None)

    if not xml_filename:
        raise Exception("Nessun file XML trovato.")

    print(f"üìÑ XML usato per {accession}: {xml_filename}")

    xml_url = f"https://www.sec.gov/Archives/edgar/data/{int(CIK)}/{accession}/{xml_filename}"
    xml_resp = requests.get(xml_url, headers=HEADERS)
    root = ET.fromstring(xml_resp.content)
    ns = {"ns": root.tag.split('}')[0].strip('{')}

    portfolio = defaultdict(lambda: {"name": "", "shares": 0.0, "value": 0})

    for info in root.findall(".//ns:infoTable", ns):
        name = info.findtext("ns:nameOfIssuer", default="N/A", namespaces=ns)
        cusip = info.findtext("ns:cusip", default="N/A", namespaces=ns)
        value = int(info.findtext("ns:value", default="0", namespaces=ns))
        
        shrs_or_prn_amt = info.find("ns:shrsOrPrnAmt", ns)
        if shrs_or_prn_amt is not None:
            shares_text = shrs_or_prn_amt.find("ns:sshPrnamt", ns).text
            shares = int(shares_text.replace(",", "").strip())
        else:
            shares = 0

        portfolio[cusip]["name"] = name
        portfolio[cusip]["shares"] += shares
        portfolio[cusip]["value"] += value
        

    return portfolio

def save_differences_to_excel(filename, increased, decreased, new_positions, closed_positions):
    rows = []

    for entry in increased:
        cusip, name, delta_shares, delta_value, prev_shares, prev_value = entry
        pct_shares = f"{(delta_shares / prev_shares * 100):.2f}%" if prev_shares else "n/a"
        pct_value = f"{(delta_value / prev_value * 100):.2f}%" if prev_value else "n/a"
        rows.append([name, cusip, "Acquisto", delta_shares, delta_value, pct_shares, pct_value])

    for entry in decreased:
        cusip, name, delta_shares, delta_value, prev_shares, prev_value = entry
        pct_shares = f"{(delta_shares / prev_shares * 100):.2f}%" if prev_shares else "n/a"
        pct_value = f"{(delta_value / prev_value * 100):.2f}%" if prev_value else "n/a"
        rows.append([name, cusip, "Vendita", delta_shares, delta_value, pct_shares, pct_value])

    for entry in new_positions:
        cusip, name, shares, value = entry
        rows.append([name, cusip, "Nuova", shares, value, "n/a", "n/a"])

    for entry in closed_positions:
        cusip, name, shares, value = entry
        rows.append([name, cusip, "Chiusa", shares, value, "n/a", "n/a"])

    # Crea il DataFrame
    df = pd.DataFrame(rows, columns=[
        "Nome", "CUSIP", "Tipo variazione", "Œî Azioni", "Œî Valore ($ mila)", 
        "Œî Azioni (%)", "Œî Valore (%)"
    ])
    
    # Scrive in Excel
    with pd.ExcelWriter(filename, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name="Differenze")
        worksheet = writer.sheets["Differenze"]


        for i, col in enumerate(df.columns, 1):  # 1-based index per Excel
            max_length = max(
                df[col].astype(str).map(len).max(),
                len(col)
            )
            worksheet.column_dimensions[get_column_letter(i)].width = max_length + 2

    print(f"‚úÖ Differenze salvate in: {filename}")


def compare_portfolios(new, old, title):
    increased, decreased, new_positions, closed_positions = [], [], [], []

    all_keys = set(new.keys()) | set(old.keys())

    for cusip in all_keys:
        new_data = new.get(cusip, {"name": "", "shares": 0, "value": 0})
        old_data = old.get(cusip, {"name": "", "shares": 0, "value": 0})

        delta_shares = new_data["shares"] - old_data["shares"]
        delta_value = new_data["value"] - old_data["value"]

        if old_data["shares"] == 0 and new_data["shares"] > 0:
            new_positions.append((cusip, new_data["name"], new_data["shares"], new_data["value"]))
        elif new_data["shares"] == 0 and old_data["shares"] > 0:
            closed_positions.append((cusip, old_data["name"], -old_data["shares"], -old_data["value"]))
        elif delta_shares > 0:
            increased.append((cusip, new_data["name"], delta_shares, delta_value, old_data["shares"], old_data["value"]))
        elif delta_shares < 0:
            decreased.append((cusip, new_data["name"], delta_shares, delta_value, old_data["shares"], old_data["value"]))

    def print_section(title, data, show_delta=True):
        if not data:
            return
        print(f"\n{title}\n" + "-" * len(title))
        for entry in sorted(data, key=lambda x: -abs(x[2])):
            cusip, name, delta_shares, delta_value = entry[:4]
            prev_shares = entry[4] if len(entry) > 4 else 0
            prev_value = entry[5] if len(entry) > 5 else 0
            pct_shares = f"{(delta_shares / prev_shares * 100):+.2f}%" if prev_shares else "n/a"
            pct_value = f"{(delta_value / prev_value * 100):+.2f}%" if prev_value else "n/a"

            if show_delta:
                print(f"- {name} | CUSIP: {cusip} | Œî Azioni: {delta_shares:+,} ({pct_shares}) | Œî Valore: ${delta_value:+,} mila ({pct_value})")
            else:
                print(f"- {name} | CUSIP: {cusip} | Azioni: {delta_shares:,} | Valore: ${delta_value:,} mila")

    print(f"\n{title}")
    print_section("üìà AUMENTI di posizione", increased)
    print_section("üìâ DIMINUZIONI di posizione", decreased)
    print_section("üÜï NUOVE posizioni", new_positions, show_delta=False)
    print_section("‚ùå POSIZIONI chiuse", closed_positions, show_delta=False)

    return increased, decreased, new_positions, closed_positions


def show_csv_table(filename):
    try:
        df = pd.read_excel(filename)
        print(f"\nüìã Contenuto di '{filename}':\n")
        print(df.to_string(index=False))
    except Exception as e:
        print(f"Errore caricando {filename}: {e}")

def send_email_with_files(subject, body, to_email, from_email, password, files=[]):
    msg = EmailMessage()
    msg["Subject"] = subject
    msg["From"] = from_email
    msg["To"] = to_email
    msg.set_content(body)

    for file in files:
        with open(file, 'rb') as f:
            data = f.read()
            msg.add_attachment(data, maintype='application', subtype='octet-stream', filename=file)

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
        smtp.login(from_email, password)
        smtp.send_message(msg)



# Ottieni ultimi 3 filing
filings_13f = get_latest_13f_accessions(forms, count=3)
(last_date, last_acc), (prev_date, prev_acc), (third_date, third_acc) = filings_13f

try:
    with open("last_filing.txt", "r") as f:
        last_processed_accession = f.read().strip()
except FileNotFoundError:
    last_processed_accession = ""

if last_acc == last_processed_accession:
    print("‚è≥ Nessun nuovo filing 13F-HR pubblicato. Esco.")
    exit()


with open("last_filing.txt", "w") as f:
    f.write(last_acc)


print(f"\nüìÖ Ultimo filing:     {last_date}")
print(f"üìÖ Penultimo filing:  {prev_date}")
print(f"üìÖ Terzultimo filing: {third_date}")


portfolio_last = load_portfolio(last_acc)

# üìÅ Salvataggio in Excel
excel_filename = f"berkshire_portfolio_{last_date}.xlsx"


rows = []
for cusip, data in sorted(portfolio_last.items(), key=lambda x: -x[1]['value']):
    rows.append({
        "Nome": data['name'],
        "CUSIP": cusip,
        "Azioni": int(data['shares']),
        "Valore ($ mila)": data['value']
    })


df = pd.DataFrame(rows)


with pd.ExcelWriter(excel_filename, engine='openpyxl') as writer:
    df.to_excel(writer, index=False, sheet_name="Differenze")
    worksheet = writer.sheets["Differenze"]


    for i, col in enumerate(df.columns, 1):  # 1-based index per Excel
        max_length = max(
            df[col].astype(str).map(len).max(),
            len(col)
        )
        worksheet.column_dimensions[get_column_letter(i)].width = max_length + 2

show_csv_table(excel_filename)

portfolio_prev = load_portfolio(prev_acc)
portfolio_third = load_portfolio(third_acc)

print(f"\nüìä Portfolio COMPLETO Berkshire Hathaway - ULTIMO filing ({last_date}):\n")

for cusip, data in sorted(portfolio_last.items(), key=lambda x: -x[1]['value']):
    name = data['name']
    shares = data['shares']
    value = data['value']
    print(f"- {name} | CUSIP: {cusip} | Azioni: {shares:,.0f} | Valore: ${value:,} mila")


# Ultimo vs penultimo
diffs_last_prev = compare_portfolios(
    portfolio_last, portfolio_prev,
    f"\nüìä Differenze tra ULTIMO ({last_date}) e PENULTIMO ({prev_date}):"
)
save_differences_to_excel(
    f"berkshire_differenze_{last_date}_vs_{prev_date}.xlsx",
    *diffs_last_prev
)

# Penultimo vs terzultimo
diffs_prev_third = compare_portfolios(
    portfolio_prev, portfolio_third,
    f"\nüìä Differenze tra PENULTIMO ({prev_date}) e TERZULTIMO ({third_date}):"
)
save_differences_to_excel(
    f"berkshire_differenze_{prev_date}_vs_{third_date}.xlsx",
    *diffs_prev_third
)


send_email_with_files(
    subject="Berkshire 13F aggiornato",
    body="In allegato i file Excel con il portafoglio e le differenze.",
    to_email=EMAIL_TO,
    from_email=EMAIL_FROM,
    password=EMAIL_PASS,
    files=[
        f"berkshire_portfolio_{last_date}.xlsx",
        f"berkshire_differenze_{last_date}_vs_{prev_date}.xlsx",
        f"berkshire_differenze_{prev_date}_vs_{third_date}.xlsx"
    ]
)

send_telegram_message("‚úÖ Nuovo 13F Berkshire processato. EXCEL aggiornati.", TELEGRAM_TOKEN, TELEGRAM_CHAT_ID)
